def checkProperty(Project project, String propName) {
    if (!project.hasProperty(propName)) return false
    String prop = project.property(propName)
    return prop != null && prop.length() > 0
}

def getPropertyOrElse(Project project, String propName, String alternative) {
    if (!checkProperty(project, propName)) return alternative
    return project.property(propName)
}

def isLibraryProject(String projectName) {
    return !projectName.startsWith('skr-demo')
}

buildscript {
    ext.springBootVersion = '2.2.0.RELEASE'
    ext.springCloudVersion = 'Hoxton.RELEASE'
    ext.lombokVersion = '1.18.8'

    repositories {
        jcenter()
        mavenCentral()
        maven { url 'http://repo.spring.io/plugins-release' }
    }
    dependencies {
//        classpath 'ch.raffael.markdown-doclet:markdown-doclet:1.4' // TODO this plugin is not worked since JDK 11
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

plugins {
    id 'idea'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '0.5'
}

//*************************************************************************
// IDEA
//*************************************************************************

idea {
    module {
        inheritOutputDirs = true
        downloadSources = true
    }
    project.settings {
        compiler {
            javac {
                javacAdditionalOptions "-parameters"
            }
        }
    }
}

//*************************************************************************
// Sub Project Config
//*************************************************************************

subprojects {
    repositories {
        jcenter()
        mavenCentral()
        maven { url 'https://repo.spring.io/milestone' }
        maven { url "https://jitpack.io" }
    }

    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'io.spring.dependency-management'
//    apply plugin: 'ch.raffael.markdown-doclet'
    if (isLibraryProject(name)) {
        apply plugin: 'java-library'
        apply plugin: 'maven'
        apply plugin: 'maven-publish'
        apply plugin: 'signing'
    }

//*************************************************************************
// Properties
//*************************************************************************

    Properties localProp = new Properties()
    try {
        localProp.load(project.rootProject.file('local.properties').newDataInputStream())
    } catch(Exception ignored) {}
    for (String propKey in localProp.keys()) {
        ext.set(propKey, localProp.get(propKey))
    }
    ext."signing.secretKeyRingFile" = rootProject.file('publish.gpg')

    task setProperties {
        doFirst {
            project.ext.executable = "$project.name"
        }
    }

//*************************************************************************
// Compile & Assemble
//*************************************************************************

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    compileJava {
        options.compilerArgs << '-parameters'
    }

    compileTestJava {
        options.compilerArgs << '-parameters'
    }

    tasks.withType(AbstractCompile) {
        options.encoding = 'UTF-8'
    }
    tasks.withType(Javadoc) {
        options.encoding = 'UTF-8'
        options.addStringOption('Xdoclint:none', '-quiet')
        if(JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }

    jar {
        manifest.attributes provider: 'gradle'
        enabled true
        doFirst {
            archiveFileName = "$project.name-${archiveVersion.get()}.${archiveExtension.get()}"
        }
    }

    test {
        testLogging.showStandardStreams = true
        workingDir = project.rootDir
        testLogging {
            events "failed"
            exceptionFormat "short"
        }
    }

    def lombokVersion = '1.18.8'

    dependencies {
        compile "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    }


    dependencyManagement {
        imports {
            mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

//*************************************************************************
// Maven
//*************************************************************************

    if (isLibraryProject(name)) {

        task sourcesJar(type: Jar, dependsOn: classes) {
            archiveClassifier.set('sources')
            from sourceSets.main.allSource
        }

        task javadocJar(type: Jar, dependsOn: javadoc) {
            archiveClassifier.set('javadoc')
            from javadoc.destinationDir
        }

        artifacts {
            archives jar
            archives sourcesJar
            archives javadocJar
        }

        group = 'org.laxture'

        publishing {
            publications {
                mavenJava(MavenPublication) {
                    groupId = project.getGroup()
                    from components.java
                    artifact sourcesJar
                    artifact javadocJar
                    pom {
                        name = project.name
                        description = 'skr project is a Spring Boot/Cloud project skeleton that define abstraction of JWT based security configuration.'
                        url = 'https://github.com/hank-cp/skr'
                        organization {
                            name = 'org.laxture'
                            url = 'https://laxture.org'
                        }
                        issueManagement {
                            system = 'GitHub'
                            url = 'https://github.com/hank-cp/skr/issues'
                        }
                        license {
                            name = 'Apache License 3.0'
                            url = 'https://github.com/hank-cp/skr/blob/master/LICENSE'
                            distribution = 'repo'
                        }
                        scm {
                            url = 'https://github.com/hank-cp/skr'
                            connection = 'scm:git:git://github.com/hank-cp/skr.git'
                            developerConnection = 'scm:git:ssh://git@github.com:hank-cp/skr.git'
                        }
                        developers {
                            developer {
                                name = 'Hank CP'
                                email = 'true.cp@gmail.com'
                            }
                        }
                    }
                    repositories {
                        maven {
                            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
                            def stagingRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : stagingRepoUrl
                            credentials {
                                username getPropertyOrElse(project, 'sonatypeUsername', '')
                                password getPropertyOrElse(project, 'sonatypePassword', '')
                            }
                        }
                    }
                }
            }
        }

        signing {
            sign publishing.publications.mavenJava
        }
    }

}