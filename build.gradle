def checkProperty(String propName) {
    if (!project.hasProperty(propName)) return false
    String prop = project.property(propName)
    return prop != null && prop.length() > 0
}

def getPropertyOrElse(String propName, String alternative) {
    if (!checkProperty(propName)) return alternative
    return project.property(propName)
}

def isLibraryProject(String projectName) {
    return !projectName.startsWith('skr-demo')
}

buildscript {
    ext.springBootVersion = '2.2.0.RELEASE'
    ext.springCloudVersion = 'Hoxton.RC2'
//    ext.springCloudVersion = 'Greenwich.RELEASE'
//    ext.springBootVersion = '2.0.8.RELEASE'
//    ext.springCloudVersion = 'Finchley.RELEASE'

    repositories {
        jcenter()
        mavenCentral()
        maven { url 'http://repo.spring.io/plugins-release' }
    }
    dependencies {
//        classpath 'ch.raffael.markdown-doclet:markdown-doclet:1.4' // TODO this plugin is not worked since JDK 11
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

plugins {
    id 'idea'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '0.5'
}

//*************************************************************************
// IDEA
//*************************************************************************

idea {
    module {
        inheritOutputDirs = true
        downloadSources = true
    }
    project.settings {
        compiler {
            javac {
                javacAdditionalOptions "-parameters"
            }
        }
    }
}

//*************************************************************************
// Sub Project Config
//*************************************************************************

subprojects {
    repositories {
        jcenter()
        mavenCentral()
        maven { url 'https://repo.spring.io/milestone' }
        maven { url "https://jitpack.io" }
    }

    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'io.spring.dependency-management'
//    apply plugin: 'ch.raffael.markdown-doclet'
    if (isLibraryProject(name)) {
        apply plugin: 'java-library'
        apply plugin: 'maven'
    }

//*************************************************************************
// Properties
//*************************************************************************

    Properties verProp = new Properties()
    verProp.load(project.rootProject.file('version.properties').newDataInputStream())
    ext.mainVersion = (verProp.get(("${project.name}" + '.ver' ).toString()) ?: '0.0.1').toString()
    ext.buildNumber = (verProp.get(("${project.name}" + '.build').toString()) ?: '1').toString()
    version = "${mainVersion}"  //.${buildNumber}"

    task setProperties {
        doFirst {
            project.ext.executable = "$project.name"
        }
    }

//*************************************************************************
// Compile & Assemble
//*************************************************************************

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    compileJava {
        options.compilerArgs << '-parameters'
    }

    tasks.withType(AbstractCompile) {
        options.encoding = 'UTF-8'
    }
    tasks.withType(Javadoc) {
        options.encoding = 'UTF-8'
    }

    jar {
        manifest.attributes provider: 'gradle'
        enabled true
        doFirst {
            archiveFileName = "$project.name-$version.${archiveExtension.get()}"
        }
    }

    test {
        testLogging.showStandardStreams = true
        workingDir = project.rootDir
        testLogging {
            events "failed"
            exceptionFormat "short"
        }
    }

    def lombokVersion = '1.18.8'

    dependencies {
        compile "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    }


    dependencyManagement {
        imports {
            mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

//*************************************************************************
// Maven
//*************************************************************************

    if (isLibraryProject(name)) {

        task sourcesJar(type: Jar, dependsOn: classes) {
            archiveClassifier = 'sources'
            from sourceSets.main.allSource
        }

        task javadocJar(type: Jar, dependsOn: javadoc) {
            archiveClassifier = 'javadoc'
            from javadoc.destinationDir
        }

        artifacts {
            archives sourcesJar
            archives javadocJar
        }

        group = 'org.laxture'
    }

}