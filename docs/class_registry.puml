@startuml

skinparam class {
    BackgroundColor<<Interface>> Pink
	BackgroundColor<<Api>> PaleGreen
	BackgroundColor<<Service>> Tomato
    BackgroundColor<<FeignClient>> LightBlue
}

abstract class AbstractRegHost {
    void register(IRealm, IRegistryPack)
    void unregister(IRealm, IRegistryPack)
    void uninstall(IRealm, IRegistryPack)
    --
    abstract void setRealmStatus(IRealm, RealmStatus)
    abstract IRealm getRegisteredRealm()
}

class IReal <<Interface>> {
    String code @unique
    int version
}

class IRegistryPack <<Interface>> {
}

class IRegistry <<Interface>> {
    Key getKey();
}

class IEntityRegistry <<Interface>> {
    boolean isBuiltin();
}

class IPermission <<Interface>> {
    String code @unique
}

IRegistry <|-- IEntityRegistry
IEntityRegistry <|-- IPermission

package "domainX" {
    class XxxRegistryPack <<Api>> {
        List<Permission> permissions;
        List<RegistryA> registryAList;
        List<RegistryB> registryBList;
        List<RegistryC> registryCList;
    }

    class XxxRegService <<Api>> {
        --
        void register(IRealm, XxxRegistryPack)
        void unregister(IRealm, XxxRegistryPack)
        void uninstall(IRealm, XxxRegistryPack)
    }

    class XxxRegHost <<Service>> {
    }

    class XxxRegClient <<FeignClient>> {
    }

    IRegistryPack <|-- XxxRegistryPack
    XxxRegService <|-- XxxRegHost
    XxxRegService <|-- XxxRegClient
    AbstractRegHost <|-- XxxRegHost
}

package "domainY" {
    class YyyRealm {
        code = "Yyy";
        version = 2;
        XxxRegistryPack = [
            List<Permission> permissions = ...;
            List<RegistryA> registryAList = ...;
            List<RegistryB> registryBList = ...;
            List<RegistryC> registryCList = ...;
        ]
        ----
        void start() [
            XxxRegClient.register(this, XxxRegistryPack);
        ]
        void stop() [
            XxxRegClient.unregister(this, XxxRegistryPack);
        ]
        void uninstall() [
            XxxRegClient.uninstall(this, XxxRegistryPack);
        ]
    }

    class YyyRegistryPack <<Api>> {
        List<RegistryD> registryDList;
        List<RegistryE> registryEList;
    }

    class YyyRegService <<Api>> {
        --
        void register(YyyRealm)
        void unregister(YyyRealm)
        void uninstall(YyyRealm)
    }

    class YyyRegHost <<Service>> {
    }

    class YyyRegClient <<FeignClient>> {
    }

    IRealm <|-- YyyRealm
    IRegistryPack <|-- YyyRegistryPack
    YyyRegService <|-- YyyRegHost
    YyyRegService <|-- YyyRegClient
    AbstractRegHost <|-- YyyRegHost
}


package "domainZ" {
    class ZzzRealm {
        code = "Zzz";
        version = 5
        XxxRegistryPack = [
            List<Permission> permissions = ...;
            List<RegistryA> registryAList = ...;
            List<RegistryB> registryBList = ...;
            List<RegistryC> registryCList = ...;
        ]
        YyyRegistryPack = [
            List<RegistryD> registryDList = ...;
            List<RegistryE> registryEList = ...;
        ]
        ----
        void start() [
            XxxRegClient.register(this, XxxRegistryPack);
            YyyRegClient.register(this, YyyRegistryPack);
        ]
        void stop() [
            XxxRegClient.unregister(this, XxxRegistryPack);
            YyyRegClient.unregister(this, YyyRegistryPack);
        ]
        void uninstall() [
            XxxRegClient.uninstall(this, XxxRegistryPack);
            YyyRegClient.uninstall(this, YyyRegistryPack);
        ]
    }

    IRealm <|-- ZzzRealm
}

@enduml